"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffVersionService = void 0;
const parseLabels_1 = require("../parser/parseLabels");
const parsePackageDiff_1 = require("../parser/parsePackageDiff");
class DiffVersionService {
    constructor(apiExecutor) {
        this.apiExecutor = apiExecutor;
    }
    getVersions(res, packagePath, deepPackages, repos, labels, tagPrefix) {
        const diffFile = res.files.find((file) => file.filename === packagePath);
        if (!diffFile) {
            return [];
        }
        return deepPackages
            .map((packageName, index) => {
            const prefix = tagPrefix[index] || "";
            const [from, to] = parsePackageDiff_1.parsePackageDiff(packageName, diffFile.patch);
            return {
                packageName: packageName,
                from: `${prefix}${from}`,
                to: `${prefix}${to}`,
                repo: repos[index],
                label: labels[index],
                changed: !!from && !!to
            };
        })
            .filter((it) => it.changed);
    }
    async getPackagesCommits(versions) {
        const fetches = versions.map(async (version) => {
            const res = await this.apiExecutor.compare(version.from, version.to, version.repo);
            return res.commits
                .filter((it) => {
                const commitLabels = parseLabels_1.parseLabels(it.commit.message);
                return commitLabels.includes(version.label);
            });
        });
        const commitsArray = await Promise.all(fetches);
        return commitsArray.reduce((memo, commits) => memo.concat(commits), []);
    }
}
exports.DiffVersionService = DiffVersionService;
//# sourceMappingURL=DiffVersionService.js.map